{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\newsapp\\\\src\\\\components\\\\News.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport NewsItem from './Newsitem'; // Import NewsItem component for individual news display\n\nimport Spinner from './Spinner'; // Import Spinner component for loading state\n\nimport PropTypes from 'prop-types'; // Import PropTypes for type-checking\n\nimport InfiniteScroll from \"react-infinite-scroll-component\"; // Import InfiniteScroll for infinite scrolling\n// Main News component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst News = props => {\n  _s();\n\n  // State hooks for managing articles, loading status, page number, and total results\n  const [articles, setArticles] = useState([]); // Holds fetched articles\n\n  const [loading, setLoading] = useState(true); // Loading indicator\n\n  const [page, setPage] = useState(1); // Current page for API pagination\n\n  const [totalResults, setTotalResults] = useState(0); // Total number of results from API\n  // Function to capitalize the first letter of a string (used for category headings)\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }; // Function to update the news based on the selected category\n\n\n  const updateNews = async () => {\n    const url = `https://gnews.io/api/v4/top-headlines?category=${props.category}&lang=en&country=${props.country}&max=10&apikey=${props.apiKey}`;\n    setLoading(true); // Set loading to true while fetching data\n\n    let data = await fetch(url); // Fetch news data from the API\n\n    let parsedData = await data.json(); // Parse the fetched data as JSON\n    // Update state with new data\n\n    setArticles(parsedData.articles); // Store articles in state\n\n    setTotalResults(parsedData.totalResults); // Update total results count\n\n    setLoading(false); // Stop loading once data is fetched\n  }; // useEffect hook to fetch news when component mounts and when category changes\n\n\n  useEffect(() => {\n    document.title = `${capitalizeFirstLetter(props.category)} - NewsApp`; // Set the document title dynamically based on category\n\n    updateNews(); // Call updateNews to fetch data\n    // eslint-disable-next-line\n  }, []); // Function to fetch more news when the user scrolls down (infinite scrolling)\n\n  const fetchMoreData = async () => {\n    const url = `https://gnews.io/api/v4/top-headlines?category=${props.category}&lang=en&country=us&max=10&apikey=${props.apiKey}&page=${page + 1}`; // Append page number to the API URL\n\n    setPage(page + 1); // Increment page number\n\n    let data = await fetch(url); // Fetch more articles from the API\n\n    let parsedData = await data.json(); // Parse the data\n    // Filter out duplicate articles based on unique URLs to avoid repetition\n\n    const uniqueArticles = parsedData.articles.filter(newArticle => !articles.some(article => article.url === newArticle.url)); // Append unique articles to the current list of articles\n\n    setArticles(articles.concat(uniqueArticles));\n    setTotalResults(parsedData.totalResults); // Update total results count\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      style: {\n        margin: '35px 0px',\n        marginTop: '90px'\n      },\n      children: [\"NewsMonkey - Top \", capitalizeFirstLetter(props.category), \" Headlines\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: articles.length // Current number of articles\n      ,\n      next: fetchMoreData // Fetch more data when scrolled to the bottom\n      ,\n      hasMore: articles.length !== totalResults // Stop scrolling when all results are loaded\n      ,\n      loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this) // Show spinner when loading more data\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: articles.map(element => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-4\",\n              children: /*#__PURE__*/_jsxDEV(NewsItem, {\n                title: element.title ? element.title : \"\" // Pass title to NewsItem\n                ,\n                description: element.description ? element.description : \"\" // Pass description to NewsItem\n                ,\n                imageUrl: element.image // Pass image URL\n                ,\n                newsUrl: element.url // Pass news URL for the link\n                ,\n                author: element.source.name // Pass author/source name\n                ,\n                date: element.publishedAt // Pass published date\n                ,\n                source: element.source.name // Pass the source of the article\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 37\n              }, this)\n            }, element.url, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}; // Default props in case none are passed\n\n\n_s(News, \"DJGT5z9fcO00SGn/4yt1PHL84Ps=\");\n\n_c = News;\nNews.defaultProps = {\n  country: 'in',\n  // Default country is India\n  category: 'general' // Default category is general\n\n}; // Type-checking with PropTypes to ensure correct prop types\n\nNews.propTypes = {\n  country: PropTypes.string,\n  // `country` should be a string\n  category: PropTypes.string // `category` should be a string\n\n};\nexport default News; // Export the News component\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"names":["React","useEffect","useState","NewsItem","Spinner","PropTypes","InfiniteScroll","News","props","articles","setArticles","loading","setLoading","page","setPage","totalResults","setTotalResults","capitalizeFirstLetter","string","charAt","toUpperCase","slice","updateNews","url","category","country","apiKey","data","fetch","parsedData","json","document","title","fetchMoreData","uniqueArticles","filter","newArticle","some","article","concat","margin","marginTop","length","map","element","description","image","source","name","publishedAt","defaultProps","propTypes"],"sources":["C:/react/newsapp/src/components/News.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport NewsItem from './Newsitem'; // Import NewsItem component for individual news display\r\nimport Spinner from './Spinner';   // Import Spinner component for loading state\r\nimport PropTypes from 'prop-types'; // Import PropTypes for type-checking\r\nimport InfiniteScroll from \"react-infinite-scroll-component\"; // Import InfiniteScroll for infinite scrolling\r\n\r\n// Main News component\r\nconst News = (props) => {\r\n    // State hooks for managing articles, loading status, page number, and total results\r\n    const [articles, setArticles] = useState([]); // Holds fetched articles\r\n    const [loading, setLoading] = useState(true); // Loading indicator\r\n    const [page, setPage] = useState(1); // Current page for API pagination\r\n    const [totalResults, setTotalResults] = useState(0); // Total number of results from API\r\n\r\n    // Function to capitalize the first letter of a string (used for category headings)\r\n    const capitalizeFirstLetter = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    } \r\n\r\n    // Function to update the news based on the selected category\r\n    const updateNews = async () => {\r\n        const url = `https://gnews.io/api/v4/top-headlines?category=${props.category}&lang=en&country=${props.country}&max=10&apikey=${props.apiKey}`;\r\n        setLoading(true); // Set loading to true while fetching data\r\n        let data = await fetch(url); // Fetch news data from the API\r\n        let parsedData = await data.json(); // Parse the fetched data as JSON\r\n\r\n        // Update state with new data\r\n        setArticles(parsedData.articles); // Store articles in state\r\n        setTotalResults(parsedData.totalResults); // Update total results count\r\n        setLoading(false); // Stop loading once data is fetched\r\n    }\r\n\r\n    // useEffect hook to fetch news when component mounts and when category changes\r\n    useEffect(() => {\r\n        document.title = `${capitalizeFirstLetter(props.category)} - NewsApp`; // Set the document title dynamically based on category\r\n        updateNews(); // Call updateNews to fetch data\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    // Function to fetch more news when the user scrolls down (infinite scrolling)\r\n    const fetchMoreData = async () => {   \r\n        const url = `https://gnews.io/api/v4/top-headlines?category=${props.category}&lang=en&country=us&max=10&apikey=${props.apiKey}&page=${page + 1}`; // Append page number to the API URL\r\n        setPage(page + 1); // Increment page number\r\n\r\n        let data = await fetch(url); // Fetch more articles from the API\r\n        let parsedData = await data.json(); // Parse the data\r\n\r\n        // Filter out duplicate articles based on unique URLs to avoid repetition\r\n        const uniqueArticles = parsedData.articles.filter(\r\n            (newArticle) => !articles.some((article) => article.url === newArticle.url)\r\n        );\r\n\r\n        // Append unique articles to the current list of articles\r\n        setArticles(articles.concat(uniqueArticles));\r\n        setTotalResults(parsedData.totalResults); // Update total results count\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Heading for the page, dynamically changes based on the selected category */}\r\n            <h1 className=\"text-center\" style={{ margin: '35px 0px', marginTop: '90px' }}>\r\n                NewsMonkey - Top {capitalizeFirstLetter(props.category)} Headlines\r\n            </h1>\r\n\r\n            {/* Display spinner while the data is loading */}\r\n            {loading && <Spinner />}\r\n\r\n            {/* Infinite scrolling functionality */}\r\n            <InfiniteScroll\r\n                dataLength={articles.length} // Current number of articles\r\n                next={fetchMoreData} // Fetch more data when scrolled to the bottom\r\n                hasMore={articles.length !== totalResults} // Stop scrolling when all results are loaded\r\n                loader={<Spinner />} // Show spinner when loading more data\r\n            > \r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {/* Map through articles and display each one using the NewsItem component */}\r\n                        {articles.map((element) => {\r\n                            return (\r\n                                <div className=\"col-md-4\" key={element.url}>\r\n                                    <NewsItem \r\n                                        title={element.title ? element.title : \"\"} // Pass title to NewsItem\r\n                                        description={element.description ? element.description : \"\"} // Pass description to NewsItem\r\n                                        imageUrl={element.image} // Pass image URL\r\n                                        newsUrl={element.url} // Pass news URL for the link\r\n                                        author={element.source.name} // Pass author/source name\r\n                                        date={element.publishedAt} // Pass published date\r\n                                        source={element.source.name} // Pass the source of the article\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </InfiniteScroll>\r\n        </>\r\n    );\r\n}\r\n\r\n// Default props in case none are passed\r\nNews.defaultProps = {\r\n    country: 'in', // Default country is India\r\n    category: 'general', // Default category is general\r\n}\r\n\r\n// Type-checking with PropTypes to ensure correct prop types\r\nNews.propTypes = {\r\n    country: PropTypes.string, // `country` should be a string\r\n    category: PropTypes.string, // `category` should be a string\r\n}\r\n\r\nexport default News; // Export the News component\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}